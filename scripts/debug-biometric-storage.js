#!/usr/bin/env node

/**
 * Biometric Storage Debug Script
 * 
 * This script helps debug issues with biometric token storage in the database.
 * It tests the complete flow from local token generation to database storage.
 */

const path = require('path');

console.log('üîç Biometric Storage Debug Script');
console.log('===================================\n');

// Test environment setup
console.log('üìã Environment Check:');
console.log(`üìÇ Current directory: ${process.cwd()}`);
console.log(`üéØ Target directory: ${path.resolve(__dirname, '..')}`);

// Check package.json to confirm we're in the right place
const fs = require('fs');
const packagePath = path.join(process.cwd(), 'package.json');
if (fs.existsSync(packagePath)) {
  const pkg = JSON.parse(fs.readFileSync(packagePath, 'utf-8'));
  console.log(`üì¶ Project: ${pkg.name} (${pkg.version})`);
} else {
  console.log('‚ùå package.json not found');
  process.exit(1);
}

console.log('\nüîß Debug Steps:');
console.log('================');

// Step 1: Check Appwrite configuration
console.log('\n1Ô∏è‚É£ Checking Appwrite Configuration...');

try {
  // Load environment variables
  const envPath = path.join(process.cwd(), '.env');
  if (fs.existsSync(envPath)) {
    console.log('   ‚úÖ .env file found');
    const envContent = fs.readFileSync(envPath, 'utf-8');
    const hasProjectId = envContent.includes('EXPO_PUBLIC_APPWRITE_PROJECT_ID');
    const hasEndpoint = envContent.includes('EXPO_PUBLIC_APPWRITE_ENDPOINT');
    const hasDatabaseId = envContent.includes('EXPO_PUBLIC_APPWRITE_DATABASE_ID');
    
    console.log(`   ${hasProjectId ? '‚úÖ' : '‚ùå'} Project ID configured`);
    console.log(`   ${hasEndpoint ? '‚úÖ' : '‚ùå'} Endpoint configured`);  
    console.log(`   ${hasDatabaseId ? '‚úÖ' : '‚ùå'} Database ID configured`);
    
    if (!hasProjectId || !hasEndpoint || !hasDatabaseId) {
      console.log('   ‚ö†Ô∏è Missing required Appwrite configuration');
    }
  } else {
    console.log('   ‚ùå .env file not found');
  }
} catch (error) {
  console.log(`   ‚ùå Error checking configuration: ${error.message}`);
}

// Step 2: Check collection configuration  
console.log('\n2Ô∏è‚É£ Checking Collection Configuration...');

try {
  const configPath = path.join(process.cwd(), 'lib', 'appwrite', 'config.ts');
  if (fs.existsSync(configPath)) {
    console.log('   ‚úÖ Appwrite config file found');
    const configContent = fs.readFileSync(configPath, 'utf-8');
    
    const hasBiometricTokens = configContent.includes('biometricTokens');
    const hasBiometricAudit = configContent.includes('biometricAudit');
    
    console.log(`   ${hasBiometricTokens ? '‚úÖ' : '‚ùå'} biometricTokens collection configured`);
    console.log(`   ${hasBiometricAudit ? '‚úÖ' : '‚ùå'} biometricAudit collection configured`);
    
    // Look for collection IDs
    if (hasBiometricTokens) {
      const tokenMatch = configContent.match(/biometricTokens:\s*{\s*id:\s*['"`]([^'"`]+)['"`]/);
      if (tokenMatch) {
        console.log(`   üìã biometricTokens ID: ${tokenMatch[1]}`);
      }
    }
    
    if (hasBiometricAudit) {
      const auditMatch = configContent.match(/biometricAudit:\s*{\s*id:\s*['"`]([^'"`]+)['"`]/);
      if (auditMatch) {
        console.log(`   üìã biometricAudit ID: ${auditMatch[1]}`);
      }
    }
  } else {
    console.log('   ‚ùå Appwrite config file not found');
  }
} catch (error) {
  console.log(`   ‚ùå Error checking collection config: ${error.message}`);
}

// Step 3: Check biometric service implementation
console.log('\n3Ô∏è‚É£ Checking Biometric Service Implementation...');

try {
  const biometricServicePath = path.join(process.cwd(), 'lib', 'biometric', 'biometric.service.ts');
  if (fs.existsSync(biometricServicePath)) {
    console.log('   ‚úÖ Biometric service found');
    const serviceContent = fs.readFileSync(biometricServicePath, 'utf-8');
    
    const hasSetupFunction = serviceContent.includes('setupBiometricAuthentication');
    const hasServerIntegration = serviceContent.includes('createServerBiometricToken');
    const hasTokenStorage = serviceContent.includes('storeBiometricToken');
    
    console.log(`   ${hasSetupFunction ? '‚úÖ' : '‚ùå'} setupBiometricAuthentication function`);
    console.log(`   ${hasServerIntegration ? '‚úÖ' : '‚ùå'} Server integration calls`);
    console.log(`   ${hasTokenStorage ? '‚úÖ' : '‚ùå'} Local token storage`);
  } else {
    console.log('   ‚ùå Biometric service not found');
  }
} catch (error) {
  console.log(`   ‚ùå Error checking biometric service: ${error.message}`);
}

// Step 4: Check auth service implementation
console.log('\n4Ô∏è‚É£ Checking Auth Service Biometric Functions...');

try {
  const authServicePath = path.join(process.cwd(), 'lib', 'appwrite', 'auth.ts');
  if (fs.existsSync(authServicePath)) {
    console.log('   ‚úÖ Auth service found');
    const authContent = fs.readFileSync(authServicePath, 'utf-8');
    
    const hasCreateToken = authContent.includes('createBiometricToken');
    const hasValidateToken = authContent.includes('validateBiometricToken');
    const hasRefreshToken = authContent.includes('refreshBiometricToken');
    const hasRevokeTokens = authContent.includes('revokeBiometricTokens');
    const hasAuditLogging = authContent.includes('logBiometricAudit');
    
    console.log(`   ${hasCreateToken ? '‚úÖ' : '‚ùå'} createBiometricToken function`);
    console.log(`   ${hasValidateToken ? '‚úÖ' : '‚ùå'} validateBiometricToken function`);
    console.log(`   ${hasRefreshToken ? '‚úÖ' : '‚ùå'} refreshBiometricToken function`);
    console.log(`   ${hasRevokeTokens ? '‚úÖ' : '‚ùå'} revokeBiometricTokens function`);
    console.log(`   ${hasAuditLogging ? '‚úÖ' : '‚ùå'} logBiometricAudit function`);
    
    // Check for database operations
    const hasDbCreate = authContent.includes('databases.createDocument') && authContent.includes('biometric');
    const hasDbQuery = authContent.includes('databases.listDocuments') && authContent.includes('biometric');
    
    console.log(`   ${hasDbCreate ? '‚úÖ' : '‚ùå'} Database create operations`);
    console.log(`   ${hasDbQuery ? '‚úÖ' : '‚ùå'} Database query operations`);
  } else {
    console.log('   ‚ùå Auth service not found');
  }
} catch (error) {
  console.log(`   ‚ùå Error checking auth service: ${error.message}`);
}

// Step 5: Check for verification script
console.log('\n5Ô∏è‚É£ Checking Database Verification Script...');

try {
  const verifyScriptPath = path.join(process.cwd(), 'scripts', 'verify-biometric-collections.js');
  if (fs.existsSync(verifyScriptPath)) {
    console.log('   ‚úÖ Verification script found');
    console.log('   üí° You can run: node scripts/verify-biometric-collections.js');
  } else {
    console.log('   ‚ùå Verification script not found');
  }
} catch (error) {
  console.log(`   ‚ùå Error checking verification script: ${error.message}`);
}

console.log('\nüîç Common Issues and Solutions:');
console.log('================================');
console.log('‚ùì If biometric data is not being stored:');
console.log('   1. Check if biometric collections exist in Appwrite Console');
console.log('   2. Verify collection IDs match in config.ts');
console.log('   3. Ensure user has permission to write to collections');
console.log('   4. Check if createBiometricToken function is being called');
console.log('   5. Verify error handling is not silently failing');

console.log('\n‚ùì If biometric setup appears to work but no database entries:');
console.log('   1. Check server-side token creation in auth.ts');
console.log('   2. Look for try-catch blocks that might be swallowing errors');  
console.log('   3. Verify Appwrite database permissions');
console.log('   4. Check if collections have proper attributes defined');

console.log('\n‚ùì If authentication works but audit logs are missing:');
console.log('   1. Check if logBiometricAudit is called after successful setup');
console.log('   2. Verify biometric_audit collection exists');
console.log('   3. Check error handling in audit logging function');

console.log('\nüöÄ Next Steps:');
console.log('==============');
console.log('1. üèóÔ∏è  Run: node scripts/verify-biometric-collections.js');
console.log('2. üß™  Test biometric setup in a user session');  
console.log('3. üîç  Check Appwrite Console for database entries');
console.log('4. üìã  Review server logs for any error messages');
console.log('5. üêõ  Add console.log statements to track token creation flow');

console.log('\n‚ú® Debug completed! Check the items above to identify issues.\n');